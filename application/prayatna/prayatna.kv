#:kivy 2.0
# Define your background color Template
<BackgroundColor@Widget>
    background_color: 1, 1, 1, 1
    canvas.before:
        Color:
            rgba: root.background_color
        Rectangle:
            size: self.size
            pos: self.pos
# Now you can simply Mix the `BackgroundColor` class with almost
# any other widget... to give it a background.
<BackgroundLabel@Label+BackgroundColor>
    background_color: 0, 0, 0, 0
    # Default the background color for this label
    # to r 0, g 0, b 0, a 0
# Use the BackgroundLabel any where in your kv code like below

#:import wheat_state data_values.wheat_state
#:import rice_state data_values.rice_state
#:import bajra_state data_values.bajra_state

#:import wheat_district_dict data_values.wheat_district_dict
#:import rice_district_dict data_values.rice_district_dict
#:import bajra_district_dict data_values.bajra_district_dict

#:import wheat_market_dict data_values.wheat_market_dict
#:import rice_market_dict data_values.rice_market_dict
#:import bajra_market_dict data_values.bajra_market_dict

<Display>:
    cols: 1
    GridLayout:
        orientation: "vertical"
        orientation:"lr-tb"
        cols: 1
        size: root.width -200, root.height -200
        pos: 100,300

        Label:
            text:"Prayatna"
            font_size:40
            size_hint: 5, None
            color: 1, 177/255, 33/255, 1
        BoxLayout:
            size_hint: 1, None
            height: '48dp'
            Button:
                text: 'Wheat'
                on_release: 
                    sm.current = 'screen_one'  #<<<<<<<<<<<<<<<<
                    sm.get_screen(sm.current).spinner_state.values = wheat_state
                    # print('SM',sm.get_screen(sm.current).spinner_state.values)
            Button:
                text: 'Rice'
                on_release: 
                    sm.current = 'screen_two'  #<<<<<<<<<<<<<<<<
                    sm.get_screen(sm.current).spinner_state.values = rice_state
                    # print('SM2',sm.get_screen(sm.current).spinner_state.values)
            Button:
                text: 'Bajra'
                on_release: 
                    sm.current = 'screen_three'  #<<<<<<<<<<<<<<<<
                    sm.get_screen(sm.current).spinner_state.values = bajra_state
                    # print('SM3',sm.get_screen(sm.current).spinner_state.values)

        ScreenManager:
            id: sm
            size: root.width -200, root.height -200 
            pos: 100,100
            Screen_One:
            Screen_Two:
            Screen_Three:
        
        Label:
            text: 'Made with <3 by Group 32(Milan,Atharva,Chinmayi)'
            multiline: False
            size_hint: 1, None
            height: '48dp'
            color: 1,1,0.8,1

#:import DatePicker datepicker_good.DatePicker

<Screen_Model>:
    crop_name: "[b]Crop[/b]"
    spinner_state: spinner_state
    spinner_district: spinner_district
    spinner_market: spinner_market
    date_btn: date_btn
    label_min_price: label_min_price
    label_max_price: label_max_price
    label_mod_price: label_mod_price
    min_price: min_price
    max_price: max_price
    mod_price: mod_price 
    GridLayout
        cols:1
        Label:
            markup: True
            font_size:30
            text:"Crop Selected : "+root.crop_name
            size_hint: 1,None
            color: 255/255,195/255,0/255,1
        GridLayout
            cols:2
            Label:
                text:"Select State:"
                color: 116/255,213/255,221/255,1
            # creating the spinner
            Spinner:
                # Assigning id 
                id: spinner_state
                # Callback 
                on_text: 
                    root.spinner_state_clicked(spinner_state.text)
                
                # initially text on spinner
                text: "Select State"
                # total values on spinner
                values: wheat_state
                # declaring size of the spinner
                # and the position of it
                # size_hint: None, None
                # size: 200, 50

            Label:
                text:"Select District:"
                color: 116/255,213/255,221/255,1
            Spinner:
                # Assigning id 
                id: spinner_district
                # Callback 
                on_text: 
                    root.spinner_district_clicked(spinner_district.text)
                # initially text on spinner
                text: "Select District"
                # total values on spinner
                values: []
                # declaring size of the spinner
                # and the position of it
                # size_hint: None, None
                # size: 200, 50
            Label:
                text:"Select Market:"
                color: 116/255,213/255,221/255,1
            Spinner:
                # Assigning id 
                id: spinner_market
                # Callback 
                on_text: root.spinner_market_clicked(spinner_market.text)
                
                # initially text on spinner
                text: "Select Market"
                # total values on spinner
                values: []
                # declaring size of the spinner
                # and the position of it
                # size_hint: None, None
                # size: 200, 50 
            
            Label:
                text:"Date:"
                color: 116/255,213/255,221/255,1
            Button:
                id: date_btn
                text: 'Select Date'
                on_release: root.getDate()

            
        Button:
            text: 'Predict Price'
            background_color: 0,128/255,254/255,1
            on_release: root.btn()
            size_hint: 1,None

        GridLayout
            cols:2
            Label:
                id: label_min_price
                text:"Min Price"
                color: 126/255,116/255,221/255,1 
            Label:
                id: min_price
                text:""
                color: 126/255,116/255,221/255,1   
            Label:
                id: label_max_price
                text:"Max Price"
                color: 126/255,116/255,221/255,1 
            Label:
                id: max_price
                text:""
                color: 126/255,116/255,221/255,1 
            Label:
                id: label_mod_price
                text:"Mod Price"
                color: 126/255,116/255,221/255,1 
            Label:
                id: mod_price
                text:""
                color: 126/255,116/255,221/255,1

<Screen_One@Screen_Model>:
    name: 'screen_one'      #<<<<<<<<<<<<<<<<wheat
    crop_name: "[b]WHEAT[/b]"

<Screen_Two@Screen_Model>:
    name: 'screen_two'      #<<<<<<<<<<<<<<<<
    crop_name: "[b]RICE[/b]"

<Screen_Three@Screen_Model>:
    name: 'screen_three'      #<<<<<<<<<<<<<<<<
    crop_name: "[b]BAJRA[/b]"

<DatePopup@Popup>:
    auto_dismiss: False
    Button:
        text: 'Close X'
        on_release: root.dismiss()

#:import Calendar calendar.Calendar
# <Day@Button>:
#     datepicker: self.parent.datepicker
#     color: [1,1,1,1]
#     background_color: root.color if self.text != "" else [0,0,0,0]
#     disabled: True if self.text == "" else False
#     on_release:
#         root.datepicker.picked = [int(self.text), root.datepicker.month, root.datepicker.year]
# <Week@BoxLayout>:
#     datepicker: root.parent
#     weekdays: ["","","","","","",""]
#     Day:
#         text: str(root.weekdays[0])
#     Day:
#         text: str(root.weekdays[1])
#     Day:
#         text: str(root.weekdays[2])
#     Day:
#         text: str(root.weekdays[3])
#     Day:
#         text: str(root.weekdays[4])
#     Day:
#         text: str(root.weekdays[5])
#     Day:
#         text: str(root.weekdays[6])
# <WeekDays@BoxLayout>:
#     Label:
#         text: "Mon"
#     Label:
#         text: "Tue"
#     Label:
#         text: "Wed"
#     Label:
#         text: "Thu"
#     Label:
#         text: "Fri"
#     Label:
#         text: "Sat"
#     Label:
#         text: "Sun"
# <NavBar@BoxLayout>:
#     datepicker: self.parent
#     Spinner:
#         try:
#             values: root.datepicker.months
#             text: root.datepicker.months[root.datepicker.month-1]
#             on_text:
#                 root.datepicker.month = root.datepicker.months.index(self.text)+1
#                 print(root.datepicker.month)
#                 print('text',self.text)
#                 print(root.datepicker.months)
#         except:
#             print(root.datepicker.month)
#             print('text',self.text)
#             print(root.datepicker.months)
#     Spinner:
#         values: [str(i) for i in range(1970,2100)]
#         text: str(root.datepicker.year)
#         on_text:
#             root.datepicker.year = int(self.text)
#     Widget:
#     Button:
#         text: "<"
#         on_release:
#             if root.datepicker.month == 1 and spin.text == "Month": root.datepicker.year -= 1
#             if spin.text == "Month": root.datepicker.month = 12 if root.datepicker.month == 1 else root.datepicker.month - 1
#             if spin.text == "Year": root.datepicker.year -= 1
#     Spinner:
#         id: spin
#         values: ["Month","Year"]
#         text: "Month"
#     Button:
#         text: ">"
#         on_release:
#             if root.datepicker.month == 12 and spin.text == "Month": root.datepicker.year += 1
#             if spin.text == "Month": root.datepicker.month = 1 if root.datepicker.month == 12 else root.datepicker.month + 1
#             if spin.text == "Year": root.datepicker.year += 1
# <DatePicker@BoxLayout>:
#     year: 2020
#     month: 1
#     picked: ["","",""]
#     months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
#     calendar: Calendar()
#     days: [(i if i > 0 else "") for i in self.calendar.itermonthdays(self.year, self.month)] + [""] * 14
#     orientation: "vertical"
#     NavBar:
#     WeekDays:
#     Week:
#         weekdays: root.days[0:7]
#     Week:
#         weekdays: root.days[7:14]
#     Week:
#         weekdays: root.days[14:21]
#     Week:
#         weekdays: root.days[21:28]
#     Week:
#         weekdays: root.days[28:35]
#     Week:
#         weekdays: root.days[35:]
#     Button:
#         background_color: 0,128/255,254/255,1
#         on_release: root.getCalValue(root.picked)
#         text: "" if root.picked == ["","",""] else "{}/{}/{}".format(root.picked[0], root.picked[1], root.picked[2])

<DatePopup@Popup>:
    auto_dismiss: True
    title: "Select Date"
    size_hint: None, None 
    size: 600,600
    BoxLayout:
        DatePicker:
            font_size:40
        Button:
            text: 'X'
            size_hint: .2, .2
            background_color: 1, 0, 0, 1
            pos_hint: {'right':1, 'top':1}
            on_release: root.dismiss()